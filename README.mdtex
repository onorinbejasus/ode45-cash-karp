# ode-rk45-cash-karp [![Build Status](https://travis-ci.org/scijs/ode-rk45-cash-karp.svg)](https://travis-ci.org/scijs/ode-rk45-cash-karp) [![npm version](https://badge.fury.io/js/ode-rk45-cash-karp.svg)](http://badge.fury.io/js/ode-rk45-cash-karp) [![Dependency Status](https://david-dm.org/scijs/ode-rk45-cash-karp.svg)](https://david-dm.org/scijs/ode-rk45-cash-karp)

> Integrate a system of ODEs using the Fifth Order Adaptive Cash-Karp Runge-Kutta (RKCK) method


## Introduction

This module integrates a system of ordinary differential equations of the form

$$[plain=true] \begin{eqnarray*} y'(t) &=& f(t, y(t)), \\ y(t_0) &=& y_0 \end{eqnarray*} $$

where $y$ is a vector of length $n$. Given time step $\Delta t$, the Cash-Karp method uses a fifth order Runge-Kutta scheme with a fourth order embedded scheme in order to compute an error estimate.

## Install

```bash
$ npm install ode-rk45-cash-karp
```

## Example

```javascript
var rk45-cash-karp = require('ode-rk45-cash-karp')

var deriv = function(dydt, y, t) {
  dydt[0] = -y[1]
  dydt[1] =  y[0]
}

var y0 = [1,0]
var n = 1000
var t0 = 0
var dt = 2.0 * Math.PI / n

var integrator = rk45-cash-karp( y0, deriv, t0, dt )

// Integrate 1000 steps:
integrator.steps(n)
```



## API

### `require('ode-rk45-adaptive')( y0, deriv, t0, dt )`
**Arguments:**
- `y0`: an array or typed array containing initial conditions. This vector is updated in-place with each integrator step.
- `deriv`: a function that calculates the derivative. Format is `function( dydt, y, t )`. Inputs are current state `y` and current time `t`, output is the calculated derivative `dydt`.
- `t0`: initial time $t$.
- `dt`: time step $\Delta t$.

**Returns**:
Initialized integrator object.

**Properties:**
- `n`: dimension of `y0`.
- `y`: current state. Initialized as a shallow copy of input `y0`.
- `deriv`: function that calculates the derivative. Initialized from input. May be changed.
- `t`: current time, incremented by `dt` with each time step.
- `dt`: time step $\Delta t$. Initialized from input `dt`. May be changed.

**Methods:**
- `.step()`: takes a single step of the RK-4 integrator and stores the result in-place in the `y` property.
- `.steps( n )`: takes `n` steps of the RK-4 integrator, storing the result in-place in the `y` property.

## Credits

(c) 2015 Ricky Reusser. MIT License
